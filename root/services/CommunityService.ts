import IMServiceManager from "@/utils/IMServiceManager";
import { log, toast } from "@/utils/system";
import { Alert } from "react-native";
import { IMService, UserService } from ".";
import { CommunityRequest, IDBITRequest } from "../request";
import { JoinGroupParams } from "./open_im_sdk/types";
import Constants, { CacheKeys, ReduxToken } from "@/constants/index";
import { CreateCommunityApiType, CreateCommunityChannelApiType, GetUserJoinedGroupListParams, ModifyCommunityParam } from "./types";
import { messageTypes, tipsTypes } from "./open_im_sdk/constants/messageContentType";
import { t } from "i18next";
import { gd } from "@/utils/pglobal";
import { ethers } from "ethers";
import {pinJsonToIPFS } from "@/utils/uploadFile";
/**
 * 获取社区列表
 * @param ensDomain
 */
export const getCommunityList = async (data: any) => {
  const { reduxParams, imUserInfo } = data.params
  const grouplist = await IMServiceManager.getInstance().getJoinedGroupList();
  const arr = JSON.parse(grouplist?.data)
  let newRes = [];
  for (let index = 0; index < arr.length; index++) {
    let newDic = {};
    const element = arr[index];
    const conversationData = await getUnreadCount(element?.groupID);
    newDic = element;
    newDic.faceURL = handleFixIpfs(element.faceURL);
    newDic.isJoinEd = true;
    newDic.conversationData = conversationData;
    let latestMsg = JSON.parse(conversationData.latestMsg);
    if (latestMsg.content.indexOf('aiHtml') != -1) latestMsg.content = ''
    if (latestMsg.contentType == tipsTypes.MEMBERENTER) {
      latestMsg.content = latestMsg.sendID + t('community.join') + t('community.community2')
      if (latestMsg.sendID == imUserInfo?.userID) latestMsg.content = t('community.welecome') + ' ' + latestMsg.senderNickname;
    }
    else if (latestMsg.contentType == tipsTypes.MEMBERQUIT) {
      latestMsg.content = latestMsg.sendID + t('community.withdraw2') + t('community.community2')
    }
    else if (latestMsg.contentType == tipsTypes.GROUPCHANNELINFOADD) {
      const info = JSON.parse(JSON.parse(latestMsg?.content)?.jsonDetail).groupChannelInfoTip;
      latestMsg.content = t('community.publish2') + info?.channelName
    }
    else if (latestMsg.contentType == tipsTypes.GROUPCREATED) {
      latestMsg.content = t('community.welcome') + ' ' + conversationData.showName
    }
    else if (latestMsg.contentType == messageTypes.TEXTMESSAGE || latestMsg.contentType == messageTypes.PICTUREMESSAGE) {
      if (latestMsg.channelID == '1' && latestMsg.content != '') {
        latestMsg.content = t('community.publish') + ' ' + latestMsg.content
      }
    }
    else if (latestMsg.contentType == tipsTypes.GROUPINFOUPDATED) {
      latestMsg.content = t('community.update')
    }

    // if (latestMsg.contentType == messageTypes.TEXTMESSAGE || latestMsg.contentType == messageTypes.PICTUREMESSAGE) {
    // }
    // else {
    //   Alert.alert(JSON.stringify(latestMsg.contentType))
    //   // if(latestMsg.sendID==userID)
    //   latestMsg.content = t('community.welcome') + ' ' + conversationData.showName
    // }
    newDic.conversationData.latestMsg = latestMsg;
    newRes.push(newDic)
  }
  log(newRes, 'newRes')
  const { sendReduxAction } = reduxParams;
  sendReduxAction(ReduxToken.SET_COMMUNITIES, { communities: newRes });
  return { list: newRes }
};
/**
 * 在我加入的社区，搜索
 */
export const searchInJoinGroup = async (data: any) => {
  const { text, communities } = data.params
  let result = []
  for (let index = 0; index < communities.length; index++) {
    const el = communities[index];
    if (el.groupName.toLowerCase().indexOf(text.toLowerCase()) >= 0) {
      result.push(el)
    }
  }
  if (result.length == 0) return { list: [] };
  else return { list: result }
}
const getUnreadCount = async (groupID: string) => {
  let respData = await IMServiceManager.getInstance().getAllConversationList();
  let list;
  if (respData == undefined || respData == null || !respData) return;
  else list = JSON.parse(respData?.data);
  for (let index = 0; index < list.length; index++) {
    const element = list[index];
    if (element?.groupID == groupID) return element
  }
}
/**
 * 获取热门社区
 * @param ensDomain
 */
export const getCommunityHot = async () => {
  const resp = await CommunityRequest.post(
    "/group/get_hot_community",
    {
      operationID: `${Date.now()}`,
    },
  );
  log(resp, 'getCommunityHot')
  let newRes = [];
  for (let index = 0; index < resp?.groupInfoArray.length; index++) {
    let newDic = {};
    const element = resp?.groupInfoArray[index];
    newDic = element;
    newDic.faceURL = handleFixIpfs(element?.faceURL)
    newRes.push(newDic)
  }
  return { list: newRes }
};
/**
 * 获取热门社区
 * @param ensDomain
 */
export const getCommunityHot_NoGDataList = async () => {
  const resp = await CommunityRequest.post(
    "/group/get_hot_community",
    {
      operationID: `${Date.now()}`,
    },
  );
  log(resp, 'getCommunityHot')
  let newRes = [];
  for (let index = 0; index < resp?.groupInfoArray.length; index++) {
    let newDic = {};
    const element = resp?.groupInfoArray[index];
    newDic = element;
    newDic.faceURL = handleFixIpfs(element?.faceURL)
    newRes.push(newDic)
  }
  return newRes
};
export const getHotBanner = async () => {
  const resp = await CommunityRequest.post(
    "/group/get_hot_community",
    {
      operationID: `${Date.now()}`,
    },


  );
  const bannerArrayImage = resp.bannerArrayImage;
  const groupInfoArray = resp.groupInfoArray;
  let newData = [];
  for (let index = 0; index < bannerArrayImage.length; index++) {
    let element = groupInfoArray[index];
    element.bannerImage = handleFixIpfs(bannerArrayImage[index]?.bannerImage)
    newData.push(element)
  }
  return newData
};

//创建社区
export const createCommunityApi = async (data: CreateCommunityApiType) => {
  const res = await CommunityRequest.post(
    "/group/create_community",
    {
      operationID: `${Date.now()}`,
      ex: "",
      groupID: "",
      groupType: 2,
      ...data,
    },
  );
  return res;
}
const handleFixIpfs = (img: string) => {
  const CID = require('cids')
  if (img.indexOf("ipfs://") > -1) {
    let url = img.split("//")[1];
    if (url.startsWith("Qm") && url.indexOf("/") > 0) {
      const cid = new CID(url.split("/")[0]);
      url = cid.toV1().toString();
      return `https://${url}.ipfs.nftstorage.link/${img.split("//")[1].split("/")[1]}`;
    } else if (url.startsWith("Qm")) {
      const cid = new CID(url);
      img = cid.toV1().toString();
      return `https://${img}.ipfs.nftstorage.link`;
      // return `${IPFS_URL}${img.split("//")[1]}`;
    } else {
      return `https://${img}.ipfs.nftstorage.link`;
    }
  }
  return img;
}
//社区频道列表
export const getCommunityChannelListApi = async (groupID: string) => {
  const res = await CommunityRequest.post(
    "/group/get_community_channel_list",
    {
      operationID: `${Date.now()}`,
      groupID: groupID
    },
  );

  return res?.data;
}

//设置社区信息
export const modifyGroupInfoApi = async (data: ModifyCommunityParam) => {
  const res = await CommunityRequest.post(
    "/group/set_group_info",
    {
      ...data,
      operationID: `${Date.now()}`,
    },
  );
  return res;
}

//获取全部社区成员列表
export const getGroupAllMemberListApi = async (groupID: string) => {
  const res = await CommunityRequest.post(
    "/group/get_group_all_member_list",
    {
      groupID,
      operationID: `${Date.now()}`,
    },
  );
  let dataHandle: any = [];
  for (let index = 0; index < res?.data.length; index++) {
    let element = res?.data[index];
    element.faceURL = handleFixIpfs(element.faceURL || '');
    dataHandle.push(element);
  }
  return dataHandle;
}

//获取全部社区成员列表
export const getGroupAllMemberListApi_GDataList = async (data: any) => {
  const groupID = data?.params.groupID;
  const res = await CommunityRequest.post(
    "/group/get_group_all_member_list",
    {
      groupID,
      operationID: `${Date.now()}`,
    },
  );
  const memberData = res?.data;
  const id_list = [];
  let dataHandle: any = [];
  const creator = [];
  const member = [];

  for (let index = 0; index < memberData.length; index++) {
    let element = memberData[index];
    const userProfile = await UserService.getUserProfile(
      element.userID
    );
    element.userProfile = userProfile == '' ? t('my.noneProduce') : userProfile;
    element.faceURL = handleFixIpfs(element.faceURL || '');
    dataHandle.push(element);
    id_list.push(element?.userID)
  }
  const dataHasStatus = await UserService.getOnline(id_list);

  for (let index = 0; index < dataHasStatus.length; index++) {
    const element = dataHasStatus[index];
    for (let index2 = 0; index2 < dataHandle.length; index2++) {
      const element2 = dataHandle[index2];
      if (element.userID == element2.userID) {
        element2.isIn = (element.status == "online") ? true : false
        if (element2.roleLevel == 2) creator.push(element2)
        else member.push(element2)
      }
    }
  }
  let finalList = ['创建者（1）'];
  finalList = finalList.concat(creator);
  finalList = finalList.concat('' + member.length);
  finalList = finalList.concat(member)
  log(finalList, 'finalListfinalList')
  return { list: finalList };
}
//解散社区
export const dismissGroupApi = async (groupID: string) => {
  // return
  const res1 = await CommunityRequest.post(
    "/group/dismiss_group",
    {
      groupID: groupID,
      operationID: `${Date.now()}`,
    },
  );
  const res2 = await IMService.getConvasationID(groupID)

  try {
    IMService.deleteConversation(res1?.conversationID)
  }
  catch (e) { }
  return res1;
}

//加入社区
export const joinGroup = async (data: JoinGroupParams) => {
  const res = await IMService.joinGroup(data)

  return res;
}
//退出社区
export const quitGroup = async (groupID: string) => {
  const res = await IMService.quitGroup(groupID)
  return res;
}
//上传头像
export const uploadCommunityLogo = async (fileData: any, progressCallBack: Function, callBack: Function) => {
  return IDBITRequest.uploadFile(Constants.PINATA_APIKEY, fileData, (e: any) => {
    progressCallBack(e)
  }, (e: any) => {
    callBack(e)
  })
}

//查找社区
export const searchCommunityApi = async (data: any) => {
  const { searchTitle } = data.params
  log(searchTitle, 'searchTitle')
  const resp = await CommunityRequest.post(
    "/group/search_community",
    {
      searchTitle,
      operationID: `${Date.now()}`,
    },
  );
  const oldRes = resp?.groupInfoArray;
  let newRes = [];
  for (let index = 0; index < oldRes.length; index++) {
    let newDic = {};
    const element = oldRes[index];
    newDic = element;
    newDic.faceURL = handleFixIpfs(element.faceURL);
    newRes.push(newDic)
  }
  return { list: newRes };
}
//获取指定某个用户加入群列表
export const getUserJoinedGroupListApi = async (data: GetUserJoinedGroupListParams) => {
  const resp = await CommunityRequest.post(
    "/group/get_user_joined_group_list",
    {
      ...data,
      operationID: `${Date.now()}`,
    },
  );
  const communities = resp?.data;
  let newRes = [];
  for (let index = 0; index < communities.length; index++) {
    let newDic = {};
    const element = communities[index];
    newDic = element;
    newDic.faceURL = handleFixIpfs(element.faceURL);
    newRes.push(newDic)
  }
  return newRes;
}
//获取指定某个用户加入群列表 ,来自列表
export const getUserJoinedGroupListApi_gData = async (data: any) => {
  const { fromUserID } = data.params
  const resp = await CommunityRequest.post(
    "/group/get_user_joined_group_list",
    {
      fromUserID,
      operationID: `${Date.now()}`,
    },
  );
  const communities = resp?.data;
  let newRes = [];
  for (let index = 0; index < communities.length; index++) {
    let newDic = {};
    const element = communities[index];
    newDic = element;
    newDic.faceURL = handleFixIpfs(element.faceURL);
    newDic.unreadCount = 0;
    newDic.isJoinEd = false;
    newRes.push(newDic)
  }
  return { list: newRes };
}

//创建社区频道
export const createCommunityChannelApi = async (data: CreateCommunityChannelApiType) => {
  const resp = await CommunityRequest.post(
    "/group/create_community_channel",
    {
      ...data,
      operationID: `${Date.now()}`,
    },
  );
  return resp;
}
/**
 * 授权
 */


export const approveTx = async (wallet: any, idoAddress: string, usdtAddress: string, USDTInterface: string, amount: any) => {
  const wallet_ = new ethers.Wallet(wallet?.privateKey, gd.public_provider);
  const signer = wallet_.connect(gd.public_provider);
  const USDTContract = new ethers.Contract(usdtAddress, USDTInterface, signer);
  try {
    const result = await USDTContract.approve(idoAddress, amount);
    // Alert.alert(JSON.stringify(result))
    return {code:1}
  }
  catch (e: any) {
    log('error:' + JSON.stringify(e));
    return {code:0,msg:JSON.stringify(e)}
  }
}
/**
 * 创建IDO
 */


export const createIdo = async (args: any, wallet: any, projectText: any, tokenInfo2: any) => {
  // 创建 IDO 合约实例
  const bytecode =
    "";

  pinJsonToIPFS(projectText, async (responseData: any) => {
    console.log('Fetch Success==================');
    const c = responseData?.IpfsHash;
    Alert.alert(JSON.stringify(c))
    args.projectText = c;
    const wallet_ = new ethers.Wallet(wallet?.privateKey, gd.public_provider);
    // const factory = new ethers.ContractFactory(IdoAbi, bytecode, wallet_)
    // const contract = await factory.deploy('0x9B3802d47663083abd60249A7a2a0DB31b7Aec10')
    // await contract.deployed()
    const signer = wallet_.connect(gd.public_provider);
    const contract = new ethers.Contract('0xbdac78ad89149343a8c0f38ae768c0a90d09ebd1', IdoAbi, signer);
    const gasPrice =await gd.public_provider.getGasPrice()
    let overrides = {
        gasLimit: 1230000,
        gasPrice: gasPrice,
        nonce: (await gd.public_provider.getTransactionCount(wallet.address)),
      }
    console.log('datadatadatadata' + JSON.stringify(args));
    const tx = await contract.createIDO({...args},overrides);
      await tx.wait();
      return

    // 等待交易上链
    await tx.wait();
  }, (e: any) => {
    toast(t('common.error' + ':' + JSON.stringify(e)))
  });
  return
  // 初始化一个以太坊 wallet
  const signer = wallet_.connect(gd.public_provider);
  // 获取合约工厂
  const contractFactory = new ethers.ContractFactory(IdoAbi, bytecode, wallet_);

  pinJsonToIPFS(projectText, async (responseData: any) => {
    console.log('Fetch Success==================');
    console.log(responseData);
    const c = 'ipfs://' + responseData?.IpfsHash;
    data.projectText = c;
    // 与部署的智能合约进行交互
    const contract = new ethers.Contract('0x9B3802d47663083abd60249A7a2a0DB31b7Aec10', IdoAbi, signer);
    // const contract2 = new ethers.Contract('0x9B3802d47663083abd60249A7a2a0DB31b7Aec10', IdoAbi, gd.public_provider);

    // const gas=await contract.estimateGas.createIDO({...data});
    // Alert.alert(JSON.stringify(data))
    // return
    // const tx = await contract.createIDO({...data});
    // // 估算gas费
    // const gasLimit = await gd.public_provider.estimateGas(tx);
    // console.log(`Gas limit: ${gasLimit.toString()}`);

    // // 获取当前gas价格
    // const gasPrice = await gd.public_provider.getGasPrice();
    // console.log(`Gas price: ${gasPrice.toString()}`);

    // // 计算总费用
    // const fee = gasLimit.mul(gasPrice);
    // console.log(`Total fee: ${ethers.utils.formatEther(fee)} ETH`);
    // 调用 .deploy() 方法部署合约

    const contractInstance = await contractFactory.deploy([data]
    );

    Alert.alert(JSON.stringify('fee'))
    return
    await contractInstance.deployed();

    // 等待智能合约部署完成
    await contractInstance.deployTransaction.wait();

    // 与部署的智能合约进行交互
    const signer2 = gd.public_provider.getSigner();
    const contract2 = new ethers.Contract(contractInstance.address, IdoAbi, signer);
    const result = await contract.someMethod();
    console.log("Result:", result);

    return contractInstance;
  }, (e: any) => {
    toast(t('common.error' + ':' + JSON.stringify(e)))
  });
}

