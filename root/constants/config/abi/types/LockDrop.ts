/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type LockStruct = {
  amount: BigNumberish;
  numOfTokens: BigNumberish;
  releasedToken: BigNumberish;
  lockEnding: BigNumberish;
};

export type LockStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  amount: BigNumber;
  numOfTokens: BigNumber;
  releasedToken: BigNumber;
  lockEnding: BigNumber;
};

export interface LockDropInterface extends utils.Interface {
  functions: {
    "RELEASEUINT()": FunctionFragment;
    "TIMEUINT()": FunctionFragment;
    "adminWithDraw()": FunctionFragment;
    "ending()": FunctionFragment;
    "getLockAt(address,uint256)": FunctionFragment;
    "getTotalLocks(address,uint256)": FunctionFragment;
    "initial()": FunctionFragment;
    "lockERC20(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "tokenCapacity()": FunctionFragment;
    "tokenTotalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "usdt()": FunctionFragment;
    "vestedAmount((uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "RELEASEUINT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIMEUINT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminWithDraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ending", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLockAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initial", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockERC20",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCapacity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vestedAmount",
    values: [LockStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "RELEASEUINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIMEUINT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminWithDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ending", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLockAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initial", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unlock(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawEvent(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawEvent"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    numOfTokens: BigNumber;
    initAmount: BigNumber;
    lengthInDays: BigNumber;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnlockEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; lengthInDays: BigNumber }
>;

export type UnlockEventFilter = TypedEventFilter<UnlockEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawEventEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; value: BigNumber; lengthInDays: BigNumber }
>;

export type WithdrawEventEventFilter = TypedEventFilter<WithdrawEventEvent>;

export interface LockDrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LockDropInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RELEASEUINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIMEUINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminWithDraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ending(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLockAt(
      user: string,
      lengthInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        numOfTokens: BigNumber;
        lockEnding: BigNumber;
        releaseToken: BigNumber;
      }
    >;

    getTotalLocks(
      user: string,
      lengthInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _length: BigNumber }>;

    initial(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockERC20(
      lengthInDays: BigNumberish,
      initAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    tokenCapacity(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      lengthInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdt(overrides?: CallOverrides): Promise<[string]>;

    vestedAmount(
      lock: LockStruct,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      lengthInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  RELEASEUINT(overrides?: CallOverrides): Promise<BigNumber>;

  TIMEUINT(overrides?: CallOverrides): Promise<BigNumber>;

  adminWithDraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ending(overrides?: CallOverrides): Promise<BigNumber>;

  getLockAt(
    user: string,
    lengthInDays: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      numOfTokens: BigNumber;
      lockEnding: BigNumber;
      releaseToken: BigNumber;
    }
  >;

  getTotalLocks(
    user: string,
    lengthInDays: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initial(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockERC20(
    lengthInDays: BigNumberish,
    initAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  tokenCapacity(overrides?: CallOverrides): Promise<BigNumber>;

  tokenTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    lengthInDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdt(overrides?: CallOverrides): Promise<string>;

  vestedAmount(
    lock: LockStruct,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    lengthInDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RELEASEUINT(overrides?: CallOverrides): Promise<BigNumber>;

    TIMEUINT(overrides?: CallOverrides): Promise<BigNumber>;

    adminWithDraw(overrides?: CallOverrides): Promise<void>;

    ending(overrides?: CallOverrides): Promise<BigNumber>;

    getLockAt(
      user: string,
      lengthInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        numOfTokens: BigNumber;
        lockEnding: BigNumber;
        releaseToken: BigNumber;
      }
    >;

    getTotalLocks(
      user: string,
      lengthInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initial(overrides?: CallOverrides): Promise<void>;

    lockERC20(
      lengthInDays: BigNumberish,
      initAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    tokenCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(
      lengthInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    usdt(overrides?: CallOverrides): Promise<string>;

    vestedAmount(
      lock: LockStruct,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      lengthInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256,uint256)"(
      sender?: string | null,
      numOfTokens?: null,
      initAmount?: null,
      lengthInDays?: null
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      numOfTokens?: null,
      initAmount?: null,
      lengthInDays?: null
    ): DepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unlock(address,uint256)"(
      sender?: string | null,
      lengthInDays?: null
    ): UnlockEventFilter;
    Unlock(sender?: string | null, lengthInDays?: null): UnlockEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawEvent(address,uint256,uint256)"(
      sender?: string | null,
      value?: null,
      lengthInDays?: null
    ): WithdrawEventEventFilter;
    WithdrawEvent(
      sender?: string | null,
      value?: null,
      lengthInDays?: null
    ): WithdrawEventEventFilter;
  };

  estimateGas: {
    RELEASEUINT(overrides?: CallOverrides): Promise<BigNumber>;

    TIMEUINT(overrides?: CallOverrides): Promise<BigNumber>;

    adminWithDraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ending(overrides?: CallOverrides): Promise<BigNumber>;

    getLockAt(
      user: string,
      lengthInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalLocks(
      user: string,
      lengthInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initial(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockERC20(
      lengthInDays: BigNumberish,
      initAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      lengthInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<BigNumber>;

    vestedAmount(
      lock: LockStruct,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      lengthInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RELEASEUINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIMEUINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminWithDraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ending(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLockAt(
      user: string,
      lengthInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalLocks(
      user: string,
      lengthInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initial(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockERC20(
      lengthInDays: BigNumberish,
      initAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenCapacity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      lengthInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestedAmount(
      lock: LockStruct,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      lengthInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
