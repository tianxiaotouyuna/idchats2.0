/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ProjectInfoStruct = {
  tokenA: string;
  tokenB: string;
  projectText: string;
  projectType: BigNumberish;
  groupID: string;
  startTime: BigNumberish;
  endTime: BigNumberish;
  inTokenCapacity: BigNumberish;
  inTokenAmount: BigNumberish;
  outTokenCapacity: BigNumberish;
  maxExchange: BigNumberish;
  exchange: BigNumberish;
  decimalA: BigNumberish;
  decimalB: BigNumberish;
  lockNum: BigNumberish;
  timeList: BigNumberish[];
};

export type ProjectInfoStructOutput = [
  string,
  string,
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber[]
] & {
  tokenA: string;
  tokenB: string;
  projectText: string;
  projectType: BigNumber;
  groupID: string;
  startTime: BigNumber;
  endTime: BigNumber;
  inTokenCapacity: BigNumber;
  inTokenAmount: BigNumber;
  outTokenCapacity: BigNumber;
  maxExchange: BigNumber;
  exchange: BigNumber;
  decimalA: BigNumber;
  decimalB: BigNumber;
  lockNum: BigNumber;
  timeList: BigNumber[];
};

export interface ProxyIDOInterface extends utils.Interface {
  functions: {
    "IDOVerify()": FunctionFragment;
    "adminAddr()": FunctionFragment;
    "adminPoint0()": FunctionFragment;
    "adminPoint1()": FunctionFragment;
    "createIDO((address,address,string,uint256,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[]))": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFee0(uint256)": FunctionFragment;
    "setFee1(uint256)": FunctionFragment;
    "setUserTime(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "IDOVerify", values?: undefined): string;
  encodeFunctionData(functionFragment: "adminAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminPoint0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminPoint1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createIDO",
    values: [ProjectInfoStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee0",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUserTime", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "IDOVerify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminPoint0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminPoint1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createIDO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUserTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "debug(string,address,address,address,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "debug"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type debugEvent = TypedEvent<
  [string, string, string, string, string, string, BigNumber],
  {
    name: string;
    msg: string;
    owner: string;
    admin: string;
    text: string;
    group: string;
    mode: BigNumber;
  }
>;

export type debugEventFilter = TypedEventFilter<debugEvent>;

export interface ProxyIDO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxyIDOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IDOVerify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminAddr(overrides?: CallOverrides): Promise<[string]>;

    adminPoint0(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminPoint1(overrides?: CallOverrides): Promise<[BigNumber]>;

    createIDO(
      data: ProjectInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee0(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee1(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserTime(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  IDOVerify(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminAddr(overrides?: CallOverrides): Promise<string>;

  adminPoint0(overrides?: CallOverrides): Promise<BigNumber>;

  adminPoint1(overrides?: CallOverrides): Promise<BigNumber>;

  createIDO(
    data: ProjectInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee0(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee1(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserTime(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IDOVerify(overrides?: CallOverrides): Promise<void>;

    adminAddr(overrides?: CallOverrides): Promise<string>;

    adminPoint0(overrides?: CallOverrides): Promise<BigNumber>;

    adminPoint1(overrides?: CallOverrides): Promise<BigNumber>;

    createIDO(
      data: ProjectInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFee0(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFee1(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setUserTime(addr: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "debug(string,address,address,address,string,string,uint256)"(
      name?: null,
      msg?: null,
      owner?: null,
      admin?: null,
      text?: null,
      group?: null,
      mode?: null
    ): debugEventFilter;
    debug(
      name?: null,
      msg?: null,
      owner?: null,
      admin?: null,
      text?: null,
      group?: null,
      mode?: null
    ): debugEventFilter;
  };

  estimateGas: {
    IDOVerify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminAddr(overrides?: CallOverrides): Promise<BigNumber>;

    adminPoint0(overrides?: CallOverrides): Promise<BigNumber>;

    adminPoint1(overrides?: CallOverrides): Promise<BigNumber>;

    createIDO(
      data: ProjectInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee0(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee1(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserTime(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IDOVerify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminPoint0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminPoint1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createIDO(
      data: ProjectInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee0(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee1(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserTime(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
