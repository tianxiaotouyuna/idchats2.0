/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ScoreInterface extends utils.Interface {
  functions: {
    "balanceOfUsdt()": FunctionFragment;
    "owner()": FunctionFragment;
    "queryUsdt(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwner(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdt()": FunctionFragment;
    "userList(address)": FunctionFragment;
    "userMap(address)": FunctionFragment;
    "verifyWhite(address)": FunctionFragment;
    "withdrawUsdt()": FunctionFragment;
    "withdrawUsdtOwner(address,uint256)": FunctionFragment;
    "writeUsdt(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOfUsdt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "queryUsdt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;
  encodeFunctionData(functionFragment: "userList", values: [string]): string;
  encodeFunctionData(functionFragment: "userMap", values: [string]): string;
  encodeFunctionData(functionFragment: "verifyWhite", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawUsdt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUsdtOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "writeUsdt",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceOfUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryUsdt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyWhite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUsdtOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeUsdt", data: BytesLike): Result;

  events: {
    "DebugMsg(string,address,string,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DebugMsg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DebugMsgEvent = TypedEvent<
  [string, string, string, BigNumber],
  { func: string; AddressMsg: string; exec: string; number: BigNumber }
>;

export type DebugMsgEventFilter = TypedEventFilter<DebugMsgEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Score extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ScoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOfUsdt(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queryUsdt(
      userAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwner(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdt(overrides?: CallOverrides): Promise<[string]>;

    userList(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userMap(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    verifyWhite(
      whiteAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawUsdt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUsdtOwner(
      _target: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writeUsdt(
      userAddr: string,
      pay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOfUsdt(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  queryUsdt(userAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwner(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdt(overrides?: CallOverrides): Promise<string>;

  userList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userMap(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  verifyWhite(
    whiteAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawUsdt(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUsdtOwner(
    _target: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writeUsdt(
    userAddr: string,
    pay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOfUsdt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    queryUsdt(userAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwner(addr: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdt(overrides?: CallOverrides): Promise<string>;

    userList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userMap(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    verifyWhite(
      whiteAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawUsdt(overrides?: CallOverrides): Promise<void>;

    withdrawUsdtOwner(
      _target: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    writeUsdt(
      userAddr: string,
      pay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DebugMsg(string,address,string,uint256)"(
      func?: null,
      AddressMsg?: null,
      exec?: null,
      number?: null
    ): DebugMsgEventFilter;
    DebugMsg(
      func?: null,
      AddressMsg?: null,
      exec?: null,
      number?: null
    ): DebugMsgEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    balanceOfUsdt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryUsdt(userAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwner(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<BigNumber>;

    userList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    verifyWhite(
      whiteAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawUsdt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUsdtOwner(
      _target: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writeUsdt(
      userAddr: string,
      pay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOfUsdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryUsdt(
      userAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwner(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyWhite(
      whiteAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawUsdt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUsdtOwner(
      _target: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writeUsdt(
      userAddr: string,
      pay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
